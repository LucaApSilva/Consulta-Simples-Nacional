"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HttpService = void 0;
const cnpja_exception_1 = require("../cnpja/cnpja.exception");
const http_enum_1 = require("./http.enum");
class HttpService {
    constructor(options) {
        this.options = options;
    }
    /**
     * Executes configure HTTP request using native fetch().
     * @param url
     * @param params
     */
    async request(url, params) {
        const { method, replacements, query, json } = params;
        const { baseUrl, authorization } = this.options;
        const replacedUrl = this.replaceUrlPlaceholders(`${baseUrl}/${url}`, replacements);
        const queryUrl = this.buildUrlQuery(query);
        const finalUrl = `${replacedUrl}${queryUrl ? `?${queryUrl}` : ''}`;
        const headers = { authorization };
        const body = JSON.stringify(json);
        if (json) {
            headers['Content-Type'] = 'application/json';
        }
        const res = await fetch(finalUrl, { method, headers, body });
        if (res.status >= Number(http_enum_1.HttpStatus.BAD_REQUEST)) {
            const resJson = await res.json();
            const { code, message, constraints } = resJson;
            throw new cnpja_exception_1.CnpjaException(code, message, constraints);
        }
        const resContentType = res.headers.get('content-type');
        if (resContentType.startsWith('application/json')) {
            return res.json();
        }
        else {
            const arrayBuffer = await res.arrayBuffer();
            return new Uint8Array(arrayBuffer);
        }
    }
    /**
     * Replace url placeholder in the format :param_name
     * which its equivalent target value.
     * @param url
     * @param replacements
     */
    replaceUrlPlaceholders(url, replacements) {
        if (!replacements)
            return url;
        let replacedUrl = url;
        for (const key in replacements) {
            const replacement = replacements[key]?.toString?.();
            if (!replacement || typeof replacement !== 'string') {
                throw new Error(`Path replacement ${key} must be a defined string`);
            }
            const replaceRegex = new RegExp(`:${key}`, 'g');
            replacedUrl = replacedUrl.replace(replaceRegex, replacement);
        }
        return replacedUrl;
    }
    /**
     * Builds search query by removing `undefined` properties
     * and stringifying input object.
     * @param query
     */
    buildUrlQuery(query) {
        for (const key in query) {
            if (query[key] === undefined) {
                delete query[key];
            }
        }
        return new URLSearchParams(query).toString();
    }
    /**
     * Sends a request with async iterable pagination support.
     * @param url
     * @param params
     */
    async *getPage(url, params = {}) {
        let token;
        while (true) {
            const requestParams = token ? { ...params, query: { token } } : params;
            const { records, next } = await this.request(url, requestParams);
            if (records.length === 0) {
                break;
            }
            yield records;
            if (!next) {
                break;
            }
            token = next;
        }
    }
    /**
     * Sends a GET request.
     * @param url
     * @param params
     */
    get(url, params = {}) {
        return this.request(url, { ...params, method: http_enum_1.HttpMethod.GET });
    }
    /**
     * Sends a POST request.
     * @param url
     * @param params
     */
    post(url, params = {}) {
        return this.request(url, { ...params, method: http_enum_1.HttpMethod.POST });
    }
    /**
     * Sends a PUT request.
     * @param url
     * @param params
     */
    put(url, params = {}) {
        return this.request(url, { ...params, method: http_enum_1.HttpMethod.PUT });
    }
    /**
     * Sends a PATCH request.
     * @param url
     * @param params
     */
    patch(url, params = {}) {
        return this.request(url, { ...params, method: http_enum_1.HttpMethod.PATCH });
    }
    /**
     * Sends a DELETE request.
     * @param url
     * @param params
     */
    delete(url, params = {}) {
        return this.request(url, { ...params, method: http_enum_1.HttpMethod.DELETE });
    }
}
exports.HttpService = HttpService;
