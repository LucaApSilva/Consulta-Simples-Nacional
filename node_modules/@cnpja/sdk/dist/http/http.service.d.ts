import { HttpOptions } from './http.enum';
import { HttpRequestParams } from './http.interface';
export declare class HttpService {
    private readonly options;
    constructor(options: HttpOptions);
    /**
     * Executes configure HTTP request using native fetch().
     * @param url
     * @param params
     */
    request<T>(url: string, params: HttpRequestParams): Promise<T>;
    /**
     * Replace url placeholder in the format :param_name
     * which its equivalent target value.
     * @param url
     * @param replacements
     */
    private replaceUrlPlaceholders;
    /**
     * Builds search query by removing `undefined` properties
     * and stringifying input object.
     * @param query
     */
    private buildUrlQuery;
    /**
     * Sends a request with async iterable pagination support.
     * @param url
     * @param params
     */
    getPage<T>(url: string, params?: HttpRequestParams): AsyncIterable<T[]>;
    /**
     * Sends a GET request.
     * @param url
     * @param params
     */
    get<T>(url: string, params?: HttpRequestParams): Promise<T>;
    /**
     * Sends a POST request.
     * @param url
     * @param params
     */
    post<T>(url: string, params?: HttpRequestParams): Promise<T>;
    /**
     * Sends a PUT request.
     * @param url
     * @param params
     */
    put<T>(url: string, params?: HttpRequestParams): Promise<T>;
    /**
     * Sends a PATCH request.
     * @param url
     * @param params
     */
    patch<T>(url: string, params?: HttpRequestParams): Promise<T>;
    /**
     * Sends a DELETE request.
     * @param url
     * @param params
     */
    delete<T>(url: string, params?: HttpRequestParams): Promise<T>;
}
